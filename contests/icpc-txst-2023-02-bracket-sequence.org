#+TITLE: Problem 2: Bracket Sequence

[LINK HERE TO PDF OF PROBLEM]

* Contents :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

UNFINISHED

* C++

#+begin_src C++ :main no
#include <iostream>
#include <string>
#include <sstream>
#include <vector>

bool isInteger(std::string s);

int main()
{
    int inputLength = 7;
    // std::cin >> inputLength;



    // std::stringstream sequence {"2 3"}; // sequenceStream.str();
    // std::stringstream sequence {"5 2 ( 1 2 3 )"}; // sequenceStream.str();
    // std::stringstream sequence {"( 2 ( 2 1 ) ) 3"}; // sequenceStream.str();
    // std::stringstream sequence {"( 12 3 )"}; // sequenceStream.str();
    // std::stringstream sequence {"( 2 ) ( 3 )"}; // sequenceStream.str();
    // std::stringstream sequence {"( ( 2 3 ) )"}; // sequenceStream.str();
    // std::stringstream sequence {"1 ( 0 ( 583920 ( 2839  82 ) ) )"}; // sequenceStream.str();
    // std::stringstream sequence {"( 2 2 ) ( 3 3 )"}; // sequenceStream.str();
    // std::stringstream sequence {"5 2 ( 3 1 ( 2 2 ) ( 3 3 ) 1 )"}; // sequenceStream.str();
    std::stringstream sequence {"( 2 ( 2 1 0 1 ) 1 ) 3 2"}; // sequenceStream.str();

    std::vector<int> values;
    std::vector<int> depthArray;
    int depth = 0;

    std::string c;
    while (sequence >> c)
    {
        if (isInteger(c))
        {
            values.push_back(std::stoi(c));
            depthArray.push_back(depth);
        }
        else if (c == "(")
        {
            depth++;
        }
        else if (c == ")")
        {
            char peeked = sequence.get();
                 peeked = sequence.get();

            std::cout << "PEEKED: " << peeked << std::endl;

            depth--;

            if (peeked == '(')
            {
                values.push_back((depth % 2 == 0) ? 0 : 1);
                depthArray.push_back(depth);
            }

            sequence.putback(peeked);
        }
    }

    std::cout << std::endl;

    for (int value : values)
    {
        std::cout << value << ' ';
    }

    std::cout << std::endl;

    for (int depth : depthArray)
    {
        std::cout << depth << ' ';
    }

    std::vector<int> tempValues;
    std::vector<int> tempDepth;

    while (values.size() > 1)
    {
        int i = 0;
        int result = (depthArray[i] % 2 != 0);

        while (i < values.size())
        {
            result = (depthArray[i] % 2 == 0) 
                        ? result + values[i] 
                        : result * values[i];
            // std::cout << result << ' ';

            if (i+1 == values.size() || (i+1 < values.size() && depthArray[i] != depthArray[i+1]))
            {
                tempValues.push_back(result);

                // int newDepth = (depthArray[i] == 0) ? depthArray[i] : depthArray[i] - 1;
                int newDepth;
                if (depthArray[i] == 0)
                    newDepth = depthArray[i];
                else
                    if (depthArray[i+1] > depthArray[i])
                        newDepth = depthArray[i];
                    else if ((i+1 == values.size()) && (depthArray[i+1] < depthArray[i]))
                        newDepth = depthArray[i];
                    else 
                        newDepth = depthArray[i] - 1;

                tempDepth.push_back(newDepth);

                if (i+1 != values.size())
                    result = (depthArray[i+1] % 2 != 0);
            }

            i++;
        }

        values.clear();
        depthArray.clear();
        values = tempValues;
        depthArray = tempDepth;

    std::cout << std::endl;

    for (int value : values)
    {
        std::cout << value << ' ';
    }

    std::cout << std::endl;

    for (int depth : depthArray)
    {
        std::cout << depth << ' ';
    }

        tempValues.clear();
        tempDepth.clear();
    }

    std::cout << std::endl << values[0] << std::endl;

    return 0;
}

bool isInteger(std::string s)
{
    try { std::stoi(s); } catch (...) { return false; }

    return true;
}
#+end_src
