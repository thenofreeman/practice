#+TITLE: Problem 1: Perfect Numbers

[LINK HERE TO PDF OF PROBLEM]

* Contents :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

If a, b, c are integers such that a = bc, a is called a multiple of b or of c, and b or c is called a divisor or
factor of a. 
If c is not plus or minus 1, b is called a proper divisor of a. 
A perfect number is a positive integer that is equal to the sum of all its positive, proper divisors; for example, 6, which equals 1 + 2 + 3, and 28, which
equals 1 + 2 + 4 + 7 + 14, are perfect numbers. 
A positive number that is not perfect is either deficient or abundant according to whether the sum of its positive, proper divisors is smaller or larger than the number
itself. 
Thus, 9, with proper divisors 1, 3, is deficient; 12, with proper divisors 1, 2, 3, 4, 6, is abundant."

Given a number, determine if it is perfect, abundant, or deficient.

/Input Specification:/
- A list of N positive integers (none greater than 60,000), with 1 < N < 100. 
- A 0 marks the end of the list.

/Output Specification:/
- The first line of output should read PERFECTION OUTPUT. 
- The next N lines of output should list for each input integer whether it is perfect, deficient, or abundant, as shown in the example below. 
- Format counts: the echoed integers should be right justified within the first 5 spaces of the output line, followed by two blank spaces, followed by the description of the integer. 
- The final line of output should read END OF OUTPUT.

/Sample Input and Output:/

#+BEGIN_SRC 
15 28 6 56 60000 22 496 0
#+END_SRC

#+BEGIN_SRC 
PERFECTION OUTPUT
    9  DEFICIENT
   28  PERFECT
    6  PERFECT
   56  ABUNDANT
60000  ABUNDANT
   22  DEFICIENT
  496  PERFECT
END OF OUTPUT
#+END_SRC

* C++

#+begin_src C++ :main no
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>

int calcPerfectNum(int n);
void parseInput(std::vector<int>& nums, std::vector<std::string>& numtypes);
void printOutput(std::vector<int>& nums, std::vector<std::string>& numtypes);

int main()
{
    std::vector<int> nums;
    std::vector<std::string> numtypes;

    parseInput(nums, numtypes);
    printOutput(nums, numtypes);

    return 0;
}

int calcPerfectNum(int n)
{   
    int factor = 0;
    int result = 0;

    for(int i = 1; i <= n/2; i++)
    {
        if (n % i == 0)
            result += i;
    }

    return result;
}

void parseInput(std::vector<int>& nums, std::vector<std::string>& numtypes)
{
    int num = 0;
    std::cin >> num;

    while (num != 0) 
    {
        int calculatedNumber = calcPerfectNum(num);
        nums.push_back(num);

        if(calculatedNumber == num)
            numtypes.push_back("  PERFECT");
        else if (calculatedNumber < num ) 
            numtypes.push_back("  DEFICIENT");
        else
            numtypes.push_back("  ABUNDANT");

        std::cin >> num;
    }
}

void printOutput(std::vector<int>& nums, std::vector<std::string>& numtypes)
{
    std::cout << "PERFECTION OUTPUT" << std::endl;

    for (int i = 0; i < nums.size(); ++i)
        std::cout << std::setw(5) << nums[i] << numtypes[i] << std::endl;

    std::cout << "END OF OUTPUT" << std::endl;
}
#+end_src
