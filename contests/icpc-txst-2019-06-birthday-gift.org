#+TITLE: Problem 4: Box of Bricks

[LINK HERE TO PDF OF PROBLEM]

* Contents :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

[description needed]

/Sample Input:/

#+BEGIN_SRC 
1
5 2 3
Elena 3
Alice 3
Maltran 3
Elizabeth 5
Mikleo 6
1 1
4 2
1 2 3
#+END_SRC

/Extended Sample Input:/

#+BEGIN_SRC 
2
5 2 3
Elena 3
Alice 3
Maltran 3
Elizabeth 5
Mikleo 6
1 1
4 2
1 2 3
6 3 4
Elena 3
Banana 4
Maltran 7
Alice 3
Fabio 5
Nolan 6
2 1
4 2
6 2
3 1 2 4
#+END_SRC

* C++

#+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

struct Person
{
    std::string name;
    int value;
    int arrivalIndex;

};

struct
{
    bool operator()(Person a, Person b) const { return a.arrivalIndex < b.arrivalIndex; }
} byArrival;

struct
{
    bool operator()(Person a, Person b) const 
    { 
        if (a.value == b.value)
            return a.arrivalIndex < b.arrivalIndex;

        return a.value > b.value; 
    }
} byValue;

int main()
{
    int numCases;
    std::cin >> numCases;

    for (int c_i = 0; c_i < numCases; c_i++)
    {
        int numGuests; // k
        std::cin >> numGuests;

        int numDoorOpens; // m
        std::cin >> numDoorOpens;

        int numQueries; // q
        std::cin >> numQueries;

        std::vector<Person> guests;
        for (int g_i = 0; g_i < numGuests; g_i++)
        {
            Person newGuest;
            std::cin >> newGuest.name 
                     >> newGuest.value;
            newGuest.arrivalIndex = g_i;

            guests.push_back(newGuest);
        }

        std::cout << "\nGUESTS: ";

        for (auto guest : guests)
        {
            std::cout << guest.name << '(' << guest.value << ')' << ' ';
        }

        std::vector<Person> admittedGuests;

        int totalPeopleLetIn = 0;

        for (int d = 0; d < numDoorOpens; d++)
        {
            int totalPeopleArrived;
            std::cin >> totalPeopleArrived; 

            int newPeopleLetIn;
            std::cin >> newPeopleLetIn;

            int newPeopleArrived = totalPeopleArrived - totalPeopleLetIn;

            std::vector<Person> potentialAdmittedGuests;

            std::cout << std::endl;
            std::cout << totalPeopleArrived << '-' << totalPeopleLetIn << std::endl;
            std::cout << guests.size() << '/' << newPeopleArrived << std::endl;

            for (int i = 0; i < newPeopleArrived; i++)
            {
                potentialAdmittedGuests.push_back(guests[i]);
            }

            std::cout << "\nPOTENTIAL: ";

            for (auto guest : potentialAdmittedGuests)
            {
                std::cout << guest.name << ' ';
            }

            guests.erase(guests.begin(), guests.begin() + newPeopleArrived); 

            std::sort(potentialAdmittedGuests.begin(), potentialAdmittedGuests.end(), byValue);

            std::cout << std::endl;
            std::cout << potentialAdmittedGuests.size() << '/' << totalPeopleLetIn << std::endl;

            for (int i = 0; i < newPeopleLetIn; i++)
            {
                admittedGuests.push_back(potentialAdmittedGuests[i]);
            }

            std::cout << "\nADMITTED: ";

            for (auto guest : admittedGuests)
            {
                std::cout << guest.name << ' ';
            }

            int numRejected = potentialAdmittedGuests.size() - newPeopleLetIn;

            std::cout << std::endl;
            std::cout << potentialAdmittedGuests.size() << '/' << numRejected << ':' << totalPeopleLetIn << std::endl;

            for (int i = 0; i < numRejected; i++)
            {
                guests.push_back(potentialAdmittedGuests[newPeopleLetIn + i]);
            }

            potentialAdmittedGuests.erase(potentialAdmittedGuests.begin(), potentialAdmittedGuests.end());

            std::sort(guests.begin(), guests.end(), byArrival);

            std::cout << std::endl;

            std::cout << "\nGUESTS: ";

            for (auto guest : guests)
            {
                std::cout << guest.name << ' ';
            }

            totalPeopleLetIn += newPeopleLetIn;
        }

        std::cout << std::endl;

        std::cout << "\nADMITTED: ";

        for (auto guest : admittedGuests)
        {
            std::cout << guest.name << ' ';
        }

        std::cout << std::endl;

        for (int i = 0; i < numQueries; i++)
        {
            int query;
            std::cin >> query;
            std::cout << admittedGuests[query-1].name << ' ';
        }

        std::cout << std::endl;
    }

    return 0;
}

#+END_SRC