#+title: Binary Search

* Info

Binary Search Algorithm.

Computes the middle index of a sorted list.

If that index contains the value to find, finish.
If the value is greator or less than that index, discard the half it is not contained in and repeat.

* C++
** Iterative

#+begin_src C++
int binarySearch(const int* items, const int& itemCount, const int& value)
{
    bool valueFound{false};
    int leftBound{0},
        rightBound{itemCount-1},
        midpoint{};

    do {
        midpoint = leftBound + (rightBound - leftBound) / 2;

        if (value == items[midpoint])
            valueFound = true;
        else if (value > items[midpoint])
            leftBound = midpoint+1;
        else if (value < items[midpoint])
            rightBound = midpoint-1;

    } while (!valueFound && (leftBound <= rightBound));

    return valueFound ? midpoint : -1;
}
#+end_src

** Recursive

#+begin_src C++
int binarySearch(const int* items, const int& itemCount, const int& value)
{
    int leftBound{0},
        rightBound{itemCount-1},
        midpoint{};

    return binarySearchHelper(items, value, leftBound, rightBound, midpoint);
}

int binarySearchHelper(const int* items, const int& value, int& leftBound,
                       int& rightBound, int& midpoint)
{
    midpoint = leftBound + (rightBound - leftBound) / 2;
    bool valueFound{false};

    if (leftBound > rightBound)
    {
        midpoint = -1;
        valueFound = true;
    }
    else
    {
        if (value == items[midpoint])
            valueFound = true;
        else if (value > items[midpoint])
            leftBound = midpoint+1;
        else if (value < items[midpoint])
            rightBound = midpoint-1;
    }

    return valueFound
            ? midpoint
            : binarySearchHelper(items, value, leftBound, rightBound, midpoint);
}
#+end_src
