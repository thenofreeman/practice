#+title: Chapter 0

** Tasks
*** Task 0.5.1

Use Python to find the number of minutes in a week.

#+begin_src python :session
60 * 24 * 7
#+end_src

#+RESULTS:
: 10080

*** Task 0.5.2

Find the remainder of 2304811 divided by 47 without using the modulo operator, %.

#+begin_src python :session
2304811 - ((2304811 // 47) * 47)
#+end_src

#+RESULTS:
: 25

*** Task 0.5.3

Enter a Boolean expression to test whether the sum of 673 and 909 is divisible by 3.

#+begin_src python :session
(673 + 909) % 3 == 0
#+end_src

#+RESULTS:
: False

*** Task 0.5.4

Assign the value -9 to x and 1/2 to y.

Predict the value of the following expression, then enter it to check your prediction:

#+begin_src python
2**(y+1/2) if x+10<0 else 2**(y-1/2)
#+end_src

#+begin_src python :session
x = -9
y = 1/2

2**(y+1/2) if x+10<0 else 2**(y-1/2)
#+end_src

#+RESULTS:
: 1.0

*** Task 0.5.5

Write a comprehension over ={1, 2, 3, 4, 5}= whose value is the set consisting of the squares of the first five positive integers.

#+begin_src python :session
{x*x for x in {1,2,3,4,5}}
#+end_src

#+RESULTS:
: {1, 4, 9, 16, 25}

*** Task 0.5.6

Write a comprehension over {0, 1, 2, 3, 4} whose value is the set consisting of the first five powers of two, starting with 20.

#+begin_src python :session
{2**x for x in {0,1,2,3,4}}
#+end_src

#+RESULTS:
: {1, 2, 4, 8, 16}

*** Task 0.5.7

The value of the previous comprehension,

#+begin_src python :session
len({x*y for x in {1,2,3} for y in {2,3,4}})
#+end_src

#+RESULTS:
: 7

is a seven-element set.

Replace {1,2,3} and {2,3,4} with two other three-elements sets so that the value becomes a nine-element set.

#+begin_src python :session
len({x*y for x in {1,2,10} for y in {1,3,4}})

#+end_src

#+RESULTS:
: 9

*** Task 0.5.8

Replace the same comprehension from Task 0.5.7 with two disjoint three-element sets so that the value becomes a five-element set.

#+begin_src python :session
len({x*y for x in {0,-3,1} for y in {-1,3,-9}})
#+end_src

#+RESULTS:
: 5

*** Task 0.5.9

Assume that S and T are assigned sets. Without using the intersection operator &, write a comprehension over S whose value is the intersection of S and T.

Hint: Use a membership test in a filter at the end of the comprehension.

Try out your comprehension with =S = {1,2,3,4}= and =T = {3,4,5,6}=.

#+begin_src python :session
S = {1,2,3,4}
T = {3,4,5,6}

{s for s in S if s in T}
#+end_src

#+RESULTS:
: {3, 4}

*** Task 0.5.10

Write an expression whose value is the average of the elements of the list [20, 10, 15, 75].

#+begin_src python :session
L = [20, 10, 15, 75]
sum(L)/len(L)
#+end_src

#+RESULTS:
: 30.0

*** Task 0.5.11

Write a double list comprehension over the lists ['A','B','C'] and [1,2,3] whose value is the list of all possible two-element lists [letter, number].

That is, the value is [['A', 1], ['A', 2], ['A', 3], ['B', 1], ['B', 2],['B', 3], ['C', 1], ['C', 2], ['C', 3]]

#+begin_src python :session :results verbatim
L = ['A', 'B', 'C']
M = [1, 2, 3]

[[l, m] for l in L for m in M]
#+end_src

#+RESULTS:
: [['A', 1], ['A', 2], ['A', 3], ['B', 1], ['B', 2], ['B', 3], ['C', 1], ['C', 2], ['C', 3]]

*** Task 0.5.12

Suppose LofL has been assigned a list whose elements are themselves lists of numbers. Write an expression that evaluates to the sum of all the numbers in all the lists.

The expression has the form =sum([sum(...= and includes one comprehension.

Test your expression after assigning =[[.25, .75, .1], [-1, 0], [4, 4, 4, 4]]= to LofL.

Note that your expression should work for a list of any length.

#+begin_src python :session
LofL = [[.25, .75, .1], [-1, 0], [4, 4, 4, 4]]

sum([sum(L) for L in LofL])
#+end_src

#+RESULTS:
: 16.1

*** Task 0.5.13

Find out what happens if the length of the left-hand side list does not match the length of the right-hand side list when unpacking lists.

#+begin_src python :session
[x, y, z] = [4, 5, 6, 7]
#+end_src

#+RESULTS:
: error: too many items to unpack

*** Task 0.5.14
Suppose S is a set of integers, e.g. ={−4, −2, 1, 2, 5, 0}=.

Write a triple comprehension whose value is a list of all three-element tuples (i, j, k) such that i, j, k are elements of S whose sum is zero.

#+begin_src python :session :results verbatim
S = {-4, -2, 1, 2, 5, 0}

[(i, j, k) for i in S for j in S for k in S if i+j+k == 0]
#+end_src

#+RESULTS:
: [(0, 0, 0), (0, 2, -2), (0, -2, 2), (1, 1, -2), (1, -2, 1), (2, 0, -2), (2, 2, -4), (2, -4, 2), (2, -2, 0), (-4, 2, 2), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0)]

*** Task 0.5.15
Modify the comprehension of the previous task so that the resulting list does not include (0, 0, 0). Hint: add a filter.

#+begin_src python :session :results verbatim
S = {-4, -2, 1, 2, 5, 0}

[(i, j, k) for i in S for j in S for k in S if i+j+k == 0 if (i, j, k) != (0,0,0)]
#+end_src

#+RESULTS:
: [(0, 2, -2), (0, -2, 2), (1, 1, -2), (1, -2, 1), (2, 0, -2), (2, 2, -4), (2, -4, 2), (2, -2, 0), (-4, 2, 2), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0)]

*** Task 0.5.16

Further modify the expression so that its value is not the list of all such tuples but is the first such tuple.

#+begin_src python :session :results verbatim
S = {-4, -2, 1, 2, 5, 0}

[(i, j, k) for i in S for j in S for k in S if i+j+k == 0 if (i, j, k) != (0,0,0)][0]
#+end_src

#+RESULTS:
: (0, 2, -2)

*** Task 0.5.17

Find an example of a list L such that len(L) and len(list(set(L))) are different.

#+begin_src python :session
L = [3, 3, 5] # any list that has a duplicate item

len(L) == len(list(set(L)))
#+end_src

#+RESULTS:
: False

*** Task 0.5.18

Write a comprehension over a range of the form range(n) such that the value of the comprehension is the set of odd numbers from 1 to 99.

#+begin_src python :session
{ x for x in range(100) if x % 2 != 0 }
#+end_src

#+RESULTS:
: {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99}

*** Task 0.5.19

Assign to L the list consisting of the first five letters, ['A','B','C','D','E'].

Next, use L in an expression whose value is

=[(0, ’A’), (1, ’B’), (2, ’C’), (3, ’D’), (4, ’E’)]=

Your expression should use a range and a zip, but should not use a comprehension.

#+begin_src python :session :results verbatim
L = ['A','B','C','D','E']
list(zip(range(5), L))
#+end_src

#+RESULTS:
: [(0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E')]

*** Task 0.5.20

Starting from the lists [10, 25, 40] and [1, 15, 20], write a comprehension whose value is the three-element list in which the first element is the sum of 10 and 1, the second is the sum of 25 and 15, and the third is the sum of 40 and 20.

Your expression should use zip but not list.

#+begin_src python :session :results verbatim
L = [10, 25, 40]
M = [1, 15, 20]

[l+m for (l, m) in zip(L, M)]
#+end_src

#+RESULTS:
: [11, 40, 60]

*** Task 0.5.21

Suppose dlist is a list of dictionaries and k is a key that appears in all the dictionaries in dlist. Write a comprehension that evaluates to the list whose ith element is the value corresponding to key k in the ith dictionary in dlist.

Test your comprehension with some data. Here are some example data:

#+begin_src python :session :results verbatim
dlist = [{'James':'Sean', 'director':'Terence'}, {'James':'Roger', 'director':'Lewis'}, {'James':'Pierce', 'director':'Roger'}]
k = 'James'

[x[k] for x in dlist]
#+end_src

#+RESULTS:
: ['Sean', 'Roger', 'Pierce']

*** Task 0.5.22

Modify the comprehension in Task 0.5.21 to handle the case in which k might not appear in all the dictionaries.

The comprehension evaluates to the list whose ith element is the value corresponding to key k in the ith dictionary in dlist if that dictionary contains that key, and 'NOT PRESENT' otherwise.

Test your comprehension with k = 'Bilbo' and k = 'Frodo' and with the following list of dictionaries:

#+begin_src python :session
dlist = [{'Bilbo':'Ian','Frodo':'Elijah'}, {'Bilbo':'Martin','Thorin':'Richard'}]
# k = 'Bilbo'
k = 'Frodo'

[x[k] if k in x else 'NOT PRESENT' for x in dlist]
#+end_src

#+RESULTS:
| Elijah | NOT PRESENT |

*** Task 0.5.23

Using range, write a comprehension whose value is a dictionary.

The keys should be the integers from 0 to 99 and the value corresponding to a key should be the
square of the key.

#+begin_src python :session
#+end_src

*** Task 0.5.24

Assign some set to the variable D, e.g. D ={'red','white','blue'}.

Now write a comprehension that evaluates to a dictionary that represents the identity function on D.

#+begin_src python :session
#+end_src

*** Task 0.5.25

Using the variables base=10 and digits=set(range(base)), write a dictionary comprehension that maps each integer between zero and nine hundred ninety nine to the list of three digits that represents that integer in base 10.

That is, the value should be:
{0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,
 10: [0, 1, 0], 11: [0, 1, 1], 12: [0, 1, 2], ...,
 999: [9, 9, 9]}

#+begin_src python :session
#+end_src

*** Task 0.5.26

Suppose d is a dictionary that maps some employee IDs (a subset of the integers from 0 to n − 1) to salaries.

Suppose L is an n-element list whose i th element is the name of employee number i.

Your goal is to write a comprehension whose value is a dictionary mapping employee names to salaries.

You can assume that employee names are distinct.

Test your comprehension with the following data:

#+begin_src python :session
id2salary = {0:1000.0, 3:990, 1:1200.50}
names = ['Larry', 'Curly', '', 'Moe']


#+end_src

*** Task 0.5.27

Try entering the definition of twice(z).

After you enter the definition, you will see the ellipsis. Just press enter. Next, try invoking the procedure on some actual arguments.

Just for fun, try strings or lists.

Finally, verify that the variable z is now not bound to any value by asking Python to evaluate the expression consisting of z.

#+begin_src python :session
#+end_src

*** Task 0.5.28

Define a one-line procedure =nextInts(L)= specified as follows:
- input: list L of integers
- output: list of integers whose ith element is one more than the ith element of L
- example: input [1, 5, 7], output [2, 6, 8].

#+begin_src python :session
#+end_src

*** Task 0.5.29

Define a one-line procedure =cubes(L)= specified as follows:
- input: list L of numbers
- output: list of numbers whose ith element is the cube of the ith element of L
- example: input [1, 2, 3], output [1, 8, 27].

#+begin_src python :session
#+end_src

*** Task 0.5.30

Define a one-line procedure =dict2list(dct,keylist)= with this spec:
- input: dictionary dct, list keylist consisting of the keys of dct
- output: list L such that L[i] = dct[keylist[i]] for i = 0, 1, 2,..., len(keylist) − 1
- example: input dct={'a':'A', 'b':'B', 'c':'C'} and keylist=['b','c','a'], output ['B', 'C', 'A']

#+begin_src python :session
#+end_src

*** Task 0.5.31

Define a one-line procedure list2dict(L, keylist) specified as follows:
- input: list L, list keylist of immutable items
- output: dictionary that maps keylist[i] to L[i] for i = 0, 1, 2,..., len(L) − 1
- example: input L=[’A’,’B’,’C’] and keylist=[’a’,’b’,’c’], output {'a':'A', 'b':'B', 'c':'C'}

Hint: Use a comprehension that iterates over a zip or a range.

#+begin_src python :session
#+end_src

*** Task 0.5.32

Write a procedure all 3 digit numbers(base, digits) with the following spec:
- input: a positive integer base and the set digits which should be {0, 1, 2,..., base−1}.
- output: the set of all three-digit numbers where the base is base

For example,
#+begin_src
>>> all_3_digit_numbers(2, {0,1})
{0, 1, 2, 3, 4, 5, 6, 7}

>>> all_3_digit_numbers(3, {0,1,2})
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}

>>> all_3_digit_numbers(10, {0,1,2,3,4,5,6,7,8,9})
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, ... 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999}
#+end_src

#+begin_src python :session
#+end_src
*** Task 0.6.1

Use procedures defined by the math module to compute the square root of 3, and raise it to the power of 2. The result might not be what you expect.

Keep in mind that Python represents nonintegral real numbers with limited precision, so the answers it gives are only approximate.

Next compute the square root of -1, the cosine of π, and the natural logarithm of e.

#+begin_src python :session
import math

math.sqrt(3)**2
#+end_src

#+RESULTS:
: 2.9999999999999996

#+begin_src python :results output
import cmath # needed for complex arithmetic
import math

print(cmath.sqrt(-1))
print(math.cos(math.pi))
print(math.log(math.e, math.e))
#+end_src

#+RESULTS:
: 1j
: -1.0
: 1.0

*** Task 0.6.2

The module random defines a procedure randint(a,b) that returns an integer chosen uniformly at random from among {a, a + 1, . . . , b}.

Try calling randint a few times. Then write a one-line procedure movie review(name) that takes as argument a string naming a movie, and returns a string review selected uniformly at random from among two or more alternatives

(Suggestions: “See it!”, “A gem!”, “Ideological claptrap!”)

#+begin_src python :session :results verbatim
from random import randint

reviews = ["see it!", "A gem!", "Ideological claptrap!"]

def movie_review(name):
    return f'{name}: {reviews[randint(0, len(reviews))]}'

movie_review("Some Movie")
#+end_src

#+RESULTS:
: Some Movie: see it!

*** Task 0.6.2

In Tasks 0.5.30 and 0.5.31 of Lab 0.5, you wrote procedures dict2list(dct, keylist) and list2dict(L, keylist).

Download the file dictutil.py from the resource page for Coding the Matrix.

Edit the file, replacing each occurence of pass with the appropriate statement.

Import this module, and test the procedures. We might have occasion to use this module in the future.

#+begin_src python :session

#+end_src

*** Task 0.6.3

#+begin_src python :session

#+end_src

*** Task 0.6.4

#+begin_src python :session

#+end_src

*** Task 0.6.5

#+begin_src python :session

#+end_src

*** Task 0.6.6

#+begin_src python :session

#+end_src

*** Task 0.6.7

#+begin_src python :session

#+end_src

*** Task 0.6.8

#+begin_src python :session

#+end_src

** Problems

For each of the following problems, write the one-line procedure using a comprehension.

*** Problem 0.8.1: increments(L)

input: list L of numbers.
output: list of numbers in which the ith element is one plus the ith element of L.

Example: increments([1,5,7]) should return [2,6,8].

*** Problem 0.8.2: cubes(L)

input: list L of numbers.
output: list of numbers in which the ith element is the cube of the ith element of L.

Example: given [1, 2, 3] return [1, 8, 27].

*** Problem 0.8.3: tuple sum(A, B)

input: lists A and B of the same length, where each element in each list is a pair (x, y) of numbers.
output: list of pairs (x, y) in which the first element of the ith pair is the sum of the first element of the ith pair in A and the first element of the ith pair in B.

example: given lists [(1, 2), (10, 20)] and [(3, 4), (30, 40)], return [(4, 6), (40, 60)].

*** Problem 0.8.4: inv dict(d)

input: dictionary d representing an invertible function f
output: dictionary representing the inverse of f, the returned dictionary’s keys are the values of d and its values are the keys of d

example: given an English-French dictionary

{'thank you': 'merci', 'goodbye': 'au revoir'}
return a French-English dictionary
{'merci':'thank you', 'au revoir':'goodbye'}

*** Problem 0.8.5

First write a procedure row(p, n) with the following spec:

input: integer p, integer n
output: n-element list such that element i is p + i

example: given p = 10 and n = 4, return [10, 11, 12, 13]

Next write a comprehension whose value is a 15-element list of 20-element lists such that the j th element of the ith list is i + j. You can use row(p, n) in your comprehension.

Finally, write the same comprehension but without using row(p, n). Hint: replace the call to row(p, n) with the comprehension that forms the body of row(p, n).
