#+title: 2. Add Two Numbers

https://leetcode.com/problems/add-two-numbers/

* Contents :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

#+begin_src
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
#+end_src

Example 2:

#+begin_src
Input: l1 = [0], l2 = [0]
Output: [0]
#+end_src

Example 3:

#+begin_src
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
#+end_src

Constraints:

- The number of nodes in each linked list is in the range [1, 100].
- 0 <= Node.val <= 9
- It is guaranteed that the list represents a number that does not have leading zeros.

* C++

#+begin_src C++
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    ListNode* newNode = new ListNode();
    ListNode* curr = newNode;

    while (l1 || l2)
    {
        int val1 = (l1 ? l1->val : 0);
        int val2 = (l2 ? l2->val : 0);

        int sum = newNode->val + (val1+val2);
        int carry = sum / 10;
        newNode->val = sum % 10;

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;

        if (l1 || l2 || carry > 0)
        {
            newNode->next = new ListNode(carry);
            newNode = newNode->next;
        }
    }

    return curr;    
}
#+end_src
