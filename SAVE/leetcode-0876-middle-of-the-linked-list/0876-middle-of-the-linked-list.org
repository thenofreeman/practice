#+title: 876. Middle Of The Linked List

https://leetcode.com/problems/middle-of-the-linked-list/

* Content :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

Example 1:

#+begin_src
Input: head = [1,2,3,4,5]
Output: [3,4,5]
#+end_src

/Explanation: The middle node of the list is node 3./

Example 2:

#+begin_src
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
#+end_src

/Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one./

Constraints:
- The number of nodes in the list is in the range [1, 100].
- 1 <= Node.val <= 100

* C++

#+begin_src C++
ListNode* middleNode(ListNode* head)
{
    ListNode* curr = head;
    ListNode* middle = head;

    int index {0};
    while (curr != nullptr)
    {
        curr = curr->next;

        ++index;

        if (index % 2 == 0)
            middle = middle->next;
    }

    return middle;
}
#+end_src
