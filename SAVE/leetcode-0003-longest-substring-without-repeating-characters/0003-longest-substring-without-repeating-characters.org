#+title: 3. Longest Substring Without Repeating Characters

https://leetcode.com/problems/longest-substring-without-repeating-characters/

* Contents :toc:
- [[#info][Info]]
- [[#c][C++]]

* Info

Given a string s, find the length of the longest substring without repeating characters.

Example 1:

#+begin_src
Input: s = "abcabcbb"
Output: 3
#+end_src

/Explanation: The answer is "abc", with the length of 3./

Example 2:

#+begin_src
Input: s = "bbbbb"
Output: 1
#+end_src

/Explanation: The answer is "b", with the length of 1./

Example 3:

#+begin_src
Input: s = "pwwkew"
Output: 3
#+end_src

/Explanation: The answer is "wke", with the length of 3./

/Notice that the answer must be a substring, "pwke" is a subsequence and not a substring./

Constraints:
- 0 <= s.length <= 5 * 104
- s consists of English letters, digits, symbols and spaces.

* C++

#+begin_src C++
int lengthOfLongestSubstring(std::string s)
{
    std::vector<char> substr;

    int longest {0};

    for (int i = 0; i < s.length(); ++i)
    {
        substr.push_back(s[i]);

        if (longest >= s.length()-i) break;

        bool repeated {false};
        int j = i+1;
        while (!repeated && j < s.length())
        {
            std::vector<char>::iterator it_pos
                                = std::find(substr.begin(), substr.end(), s[j]);

            if (it_pos != substr.end())
                repeated = true;
            else
                substr.push_back(s[j]);

            ++j;
        }

        if (substr.size() > longest)
            longest = substr.size();

        substr.clear();

    }

    return longest;
}
#+end_src
